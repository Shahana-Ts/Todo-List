<?phpsession_start();include("navbar.php");// Use PDO for DBrequire_once 'Db.php';error_reporting(E_ALL);ini_set('display_errors', 1);// Fix 1: Proper user_id handling with fallback$user_id = isset($_SESSION['user_id']) ? (int)$_SESSION['user_id'] : 1;// Debugging: Log all POST requestsif ($_SERVER['REQUEST_METHOD'] === 'POST') {    file_put_contents('debug_post.txt', print_r($_POST, true));}// -------------------- ADD TASK --------------------if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_task'])) {    // Fix 2: Better input validation and sanitization    $task_name = isset($_POST['task_name']) ? htmlspecialchars(trim($_POST['task_name'])) : '';    $description = isset($_POST['description']) ? htmlspecialchars(trim($_POST['description'])) : '';    $priority = isset($_POST['priority']) ? $_POST['priority'] : 'medium';    $category = isset($_POST['category']) ? $_POST['category'] : 'other';        // Fix 3: Better due_date handling    $due_date = null;    if (!empty($_POST['due_date'])) {        // Try to parse the date, handle potential errors        $date_obj = DateTime::createFromFormat('Y-m-d H:i', $_POST['due_date']);        if ($date_obj) {            $due_date = $date_obj->format('Y-m-d H:i:s');        }    }    // Fix 4: Better validation    if (!empty($task_name)) {        try {            // Fix 5: Check if $pdo is available            if (!isset($pdo)) {                throw new Exception("Database connection not available");            }                        $stmt = $pdo->prepare("                INSERT INTO tasks (user_id, task_name, description, priority, category, due_date, is_completed)                 VALUES (?, ?, ?, ?, ?, ?, 0)            ");                        $result = $stmt->execute([$user_id, $task_name, $description, $priority, $category, $due_date]);                        if ($stmt->rowCount() > 0) {                $_SESSION['flash'] = "Task added successfully ✅";            } else {                $errorInfo = $stmt->errorInfo();                $_SESSION['flash'] = "Insert failed: " . print_r($errorInfo, true);            }        } catch (Exception $e) {            error_log("Task creation error: " . $e->getMessage());            $_SESSION['flash'] = "Database error occurred: " . $e->getMessage();        }                header("Location: Index.php");        exit;    } else {        $_SESSION['flash'] = "Task name is required!";        header("Location: Index.php");        exit;    }}// -------------------- UPDATE TASK --------------------if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['update_task'])) {    $taskId     = isset($_POST['task_id']) ? (int)$_POST['task_id'] : 0;    $task_name  = isset($_POST['task_name']) ? trim($_POST['task_name']) : '';    $description = isset($_POST['description']) ? trim($_POST['description']) : '';    $priority   = isset($_POST['priority']) ? $_POST['priority'] : 'medium';    $category   = isset($_POST['category']) ? $_POST['category'] : 'other';        $due_date = null;    if (!empty($_POST['due_date'])) {        $date_obj = DateTime::createFromFormat('Y-m-d H:i', $_POST['due_date']);        if ($date_obj) {            $due_date = $date_obj->format('Y-m-d H:i:s');        }    }    if ($task_name && $taskId > 0) {        try {            $stmt = $pdo->prepare("UPDATE tasks                                    SET task_name=?, description=?, priority=?, category=?, due_date=?                                    WHERE id=? AND user_id=?");            $result = $stmt->execute([$task_name, $description, $priority, $category, $due_date, $taskId, $user_id]);                        if ($result) {                $_SESSION['flash'] = "Task updated successfully ✨";            } else {                $_SESSION['flash'] = "Error updating task.";            }        } catch (Exception $e) {            error_log("Task update error: " . $e->getMessage());            $_SESSION['flash'] = "Database error occurred.";        }                header("Location: Index.php");        exit;    }}// -------------------- COMPLETE TASK --------------------if (isset($_GET['complete'])) {    $taskId = (int)$_GET['complete'];    if ($taskId > 0) {        try {            $stmt = $pdo->prepare("UPDATE tasks SET is_completed = 1, completed_at = NOW() WHERE id = ? AND user_id = ?");            $result = $stmt->execute([$taskId, $user_id]);                        if ($result) {                $_SESSION['flash'] = "Task marked as complete 🎉";            }        } catch (Exception $e) {            error_log("Task completion error: " . $e->getMessage());            $_SESSION['flash'] = "Error completing task.";        }    }    header("Location: Index.php");    exit;}// -------------------- DELETE TASK --------------------if (isset($_GET['delete'])) {    $taskId = (int)$_GET['delete'];    if ($taskId > 0) {        try {            $stmt = $pdo->prepare("DELETE FROM tasks WHERE id = ? AND user_id = ?");            $result = $stmt->execute([$taskId, $user_id]);                        if ($result) {                $_SESSION['flash'] = "Task deleted 🗑️";            }        } catch (Exception $e) {            error_log("Task deletion error: " . $e->getMessage());            $_SESSION['flash'] = "Error deleting task.";        }    }    header("Location: Index.php");    exit;}// -------------------- FETCH TASKS --------------------$tasks = [];try {    if (isset($pdo)) {        $stmt = $pdo->prepare("            SELECT *,                    CASE                        WHEN due_date < NOW() AND is_completed = 0 THEN 'overdue'                       ELSE ''                   END AS status            FROM tasks             WHERE user_id = ?             ORDER BY                 FIELD(priority, 'high','medium','low'),                due_date ASC,                created_at DESC        ");        $stmt->execute([$user_id]);        $tasks = $stmt->fetchAll(PDO::FETCH_ASSOC);    }} catch (Exception $e) {    error_log("Task fetch error: " . $e->getMessage());    $_SESSION['flash'] = "Error loading tasks.";}$completedCount = count(array_filter($tasks, fn($t) => $t['is_completed']));$totalTasks = count($tasks);$progressPercent = $totalTasks > 0 ? ($completedCount / $totalTasks) * 100 : 0;?><!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <title>QuickList Pro | Premium Task Manager</title>  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <!-- Google Fonts -->  <link rel="preconnect" href="https://fonts.googleapis.com">  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">    <!-- Bootstrap 5 -->  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">  <!-- Font Awesome Pro (using free version) -->  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">  <!-- Animate.css -->  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">  <!-- AOS (Animate On Scroll) -->  <link href="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.css" rel="stylesheet">  <!-- SweetAlert2 -->  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.css">  <!-- Flatpickr -->  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">  <!-- Toastify -->  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">  <!-- Chart.js -->  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>  <style>    :root {      --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);      --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);      --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);      --glass-bg: rgba(255, 255, 255, 0.25);      --glass-border: rgba(255, 255, 255, 0.18);      --shadow-soft: 0 8px 32px rgba(31, 38, 135, 0.37);      --shadow-hover: 0 15px 35px rgba(31, 38, 135, 0.4);      --text-primary: #2d3748;      --text-secondary: #4a5568;    }    * {      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);    }    body {      font-family: 'Inter', sans-serif;      background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);      background-attachment: fixed;      min-height: 100vh;      color: var(--text-primary);    }    /* Animated Background Particles */    .particles {      position: fixed;      top: 0;      left: 0;      width: 100%;      height: 100%;      z-index: -1;      overflow: hidden;    }    .particle {      position: absolute;      background: rgba(255, 255, 255, 0.1);      border-radius: 50%;      animation: float 6s ease-in-out infinite;    }    @keyframes float {      0%, 100% { transform: translateY(0px) rotate(0deg); }      50% { transform: translateY(-20px) rotate(180deg); }    }    /* Glassmorphism Cards */    .glass-card {      background: var(--glass-bg);      backdrop-filter: blur(20px);      -webkit-backdrop-filter: blur(20px);      border-radius: 20px;      border: 1px solid var(--glass-border);      box-shadow: var(--shadow-soft);      position: relative;      overflow: hidden;    }    .glass-card::before {      content: '';      position: absolute;      top: 0;      left: -100%;      width: 100%;      height: 100%;      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);      transition: left 0.7s ease;    }    .glass-card:hover::before {      left: 100%;    }    .glass-card:hover {      transform: translateY(-5px);      box-shadow: var(--shadow-hover);    }    /* Premium Header */    .premium-header {      background: var(--glass-bg);      backdrop-filter: blur(20px);      border-radius: 25px;      padding: 2rem;      margin-bottom: 2rem;      border: 1px solid var(--glass-border);      position: relative;      overflow: hidden;    }    .premium-title {      font-family: 'Playfair Display', serif;      font-weight: 700;      font-size: 2.5rem;      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);      -webkit-background-clip: text;      -webkit-text-fill-color: transparent;      background-clip: text;      text-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);    }    /* Task Cards */    .task-card {      background: var(--glass-bg);      backdrop-filter: blur(20px);      border-radius: 16px;      border: 1px solid var(--glass-border);      margin-bottom: 1rem;      position: relative;      overflow: hidden;    }    .task-card::after {      content: '';      position: absolute;      top: 0;      left: 0;      right: 0;      height: 4px;      background: var(--primary-gradient);    }    .task-card.completed::after {      background: var(--success-gradient);    }    .task-card.overdue::after {      background: var(--secondary-gradient);    }    /* Priority Indicators */    .priority-high { border-left: 4px solid #ff6b6b; }    .priority-medium { border-left: 4px solid #feca57; }    .priority-low { border-left: 4px solid #48dbfb; }    /* Buttons */    .btn-premium {      background: var(--primary-gradient);      border: none;      border-radius: 12px;      padding: 12px 24px;      font-weight: 600;      color: white;      position: relative;      overflow: hidden;      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);    }    .btn-premium:hover {      transform: translateY(-2px);      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);    }    .btn-premium::before {      content: '';      position: absolute;      top: 0;      left: -100%;      width: 100%;      height: 100%;      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);      transition: left 0.5s ease;    }    .btn-premium:hover::before {      left: 100%;    }    /* Form Controls */    .form-control, .form-select {      background: rgba(255, 255, 255, 0.9);      border: 2px solid transparent;      border-radius: 12px;      padding: 12px 16px;      font-weight: 500;      transition: all 0.3s ease;    }    .form-control:focus, .form-select:focus {      background: rgba(255, 255, 255, 0.95);      border-color: #667eea;      box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);      transform: translateY(-1px);    }    /* Progress Ring */    .progress-ring {      width: 120px;      height: 120px;    }    .progress-ring-circle {      stroke: #667eea;      stroke-width: 8;      fill: transparent;      stroke-dasharray: 283;      stroke-dashoffset: 283;      transform: rotate(-90deg);      transform-origin: 50% 50%;      animation: progress 2s ease-in-out forwards;    }    @keyframes progress {      to {        stroke-dashoffset: calc(283 - (283 * var(--progress)) / 100);      }    }    /* Stats Cards */    .stat-card {      background: var(--glass-bg);      backdrop-filter: blur(20px);      border-radius: 16px;      padding: 1.5rem;      text-align: center;      border: 1px solid var(--glass-border);      box-shadow: var(--shadow-soft);    }    .stat-number {      font-size: 2rem;      font-weight: 700;      background: var(--primary-gradient);      -webkit-background-clip: text;      -webkit-text-fill-color: transparent;      background-clip: text;    }    /* Dark Mode */    .dark-mode {      --glass-bg: rgba(0, 0, 0, 0.4);      --glass-border: rgba(255, 255, 255, 0.1);      --text-primary: #f7fafc;      --text-secondary: #e2e8f0;    }    .dark-mode body {      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);    }    /* Search Bar */    .search-container {      position: relative;      margin-bottom: 2rem;    }    .search-input {      background: var(--glass-bg);      backdrop-filter: blur(20px);      border: 2px solid var(--glass-border);      border-radius: 50px;      padding: 15px 50px 15px 20px;      width: 100%;      font-size: 1.1rem;    }    .search-icon {      position: absolute;      right: 20px;      top: 50%;      transform: translateY(-50%);      color: #667eea;    }    /* Floating Action Button */    .fab {      position: fixed;      bottom: 30px;      right: 30px;      width: 60px;      height: 60px;      border-radius: 50%;      background: var(--primary-gradient);      color: white;      border: none;      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);      font-size: 24px;      z-index: 1000;    }    .fab:hover {      transform: scale(1.1);      box-shadow: 0 12px 30px rgba(102, 126, 234, 0.6);    }    /* Tooltip Styles */    .tooltip {      background: var(--glass-bg);      backdrop-filter: blur(20px);      border-radius: 8px;      border: 1px solid var(--glass-border);    }    /* Custom Scrollbar */    ::-webkit-scrollbar {      width: 8px;    }    ::-webkit-scrollbar-track {      background: rgba(255, 255, 255, 0.1);      border-radius: 4px;    }    ::-webkit-scrollbar-thumb {      background: var(--primary-gradient);      border-radius: 4px;    }    /* Filter Tabs */    .filter-tabs {      background: var(--glass-bg);      backdrop-filter: blur(20px);      border-radius: 15px;      padding: 10px;      margin-bottom: 2rem;      display: flex;      gap: 5px;    }    .filter-tab {      flex: 1;      padding: 12px 20px;      border: none;      border-radius: 10px;      background: transparent;      color: var(--text-secondary);      font-weight: 500;      transition: all 0.3s ease;    }    .filter-tab.active {      background: var(--primary-gradient);      color: white;      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);    }    /* Modal Enhancements */    .modal-content {      background: var(--glass-bg);      backdrop-filter: blur(20px);      border: 1px solid var(--glass-border);      border-radius: 20px;    }    /* Badge Styles */    .badge-premium {      background: var(--primary-gradient);      color: white;      padding: 6px 12px;      border-radius: 20px;      font-weight: 600;      font-size: 0.75rem;      text-transform: uppercase;      letter-spacing: 0.5px;    }    /* Animation Classes */    .slide-in-bottom {      animation: slideInBottom 0.5s cubic-bezier(0.23, 1, 0.32, 1) both;    }    @keyframes slideInBottom {      0% {        transform: translateY(100px);        opacity: 0;      }      100% {        transform: translateY(0);        opacity: 1;      }    }    .fade-in-scale {      animation: fadeInScale 0.5s cubic-bezier(0.23, 1, 0.32, 1) both;    }    @keyframes fadeInScale {      0% {        transform: scale(0.8);        opacity: 0;      }      100% {        transform: scale(1);        opacity: 1;      }    }    /* Responsive Design */    @media (max-width: 768px) {      .premium-title {        font-size: 2rem;      }            .premium-header {        padding: 1.5rem;      }    }    /* Fix: Alert styling */    .alert {      background: var(--glass-bg);      backdrop-filter: blur(20px);      border: 1px solid var(--glass-border);      border-radius: 12px;      color: var(--text-primary);    }  </style></head><body>  <!-- Animated Background -->  <div class="particles"></div>  <div class="container py-4">    <!-- Premium Header -->    <div class="premium-header" data-aos="fade-down">      <div class="row align-items-center">        <div class="col-md-6">          <h1 class="premium-title mb-2">            <i class="fas fa-rocket me-3"></i>            QuickList Pro          </h1>          <p class="lead text-white-50 mb-0">Premium Task Management Experience</p>        </div>        <div class="col-md-6 text-md-end">          <div class="d-flex justify-content-md-end align-items-center gap-3">            <!-- Progress Ring -->            <div class="position-relative">              <svg class="progress-ring">                <circle class="progress-ring-circle" cx="60" cy="60" r="45" style="--progress: <?= $progressPercent ?>"></circle>              </svg>              <div class="position-absolute top-50 start-50 translate-middle text-center">                <div class="stat-number"><?= $completedCount ?></div>                <small class="text-white-50">of <?= $totalTasks ?></small>              </div>            </div>                        <!-- Controls -->            <div class="d-flex gap-2">              <button id="darkToggle" class="btn btn-outline-light btn-lg" data-bs-toggle="tooltip" title="Toggle Dark Mode">                <i class="fas fa-moon"></i>              </button>              <button id="fullscreenBtn" class="btn btn-outline-light btn-lg" data-bs-toggle="tooltip" title="Fullscreen">                <i class="fas fa-expand"></i>              </button>            </div>          </div>        </div>      </div>    </div>    <!-- Flash Messages -->    <?php if (!empty($_SESSION['flash'])): ?>      <div class="alert alert-info alert-dismissible fade show" role="alert">        <?= $_SESSION['flash'] ?>        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>      </div>      <script>        document.addEventListener('DOMContentLoaded', function() {          Toastify({            text: "<?= addslashes($_SESSION['flash']) ?>",            duration: 3000,            close: true,            gravity: "top",            position: "right",            backgroundColor: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",            className: "premium-toast"          }).showToast();        });      </script>      <?php unset($_SESSION['flash']); ?>    <?php endif; ?>    <!-- Stats Row -->    <div class="row mb-4" data-aos="fade-up" data-aos-delay="100">      <div class="col-md-3 col-6 mb-3">        <div class="stat-card">          <div class="stat-number"><?= $totalTasks ?></div>          <div class="text-muted">Total Tasks</div>        </div>      </div>      <div class="col-md-3 col-6 mb-3">        <div class="stat-card">          <div class="stat-number"><?= $completedCount ?></div>          <div class="text-muted">Completed</div>        </div>      </div>      <div class="col-md-3 col-6 mb-3">        <div class="stat-card">          <div class="stat-number"><?= count(array_filter($tasks, fn($t) => !$t['is_completed'])) ?></div>          <div class="text-muted">Pending</div>        </div>      </div>      <div class="col-md-3 col-6 mb-3">        <div class="stat-card">          <div class="stat-number"><?= count(array_filter($tasks, fn($t) => $t['status'] === 'overdue')) ?></div>          <div class="text-muted">Overdue</div>        </div>      </div>    </div>    <div class="row">      <div class="col-lg-4 mb-4">        <!-- Add Task Card -->        <div class="glass-card" data-aos="fade-right">          <div class="card-header bg-transparent border-0 p-4">            <h4 class="mb-0">              <i class="fas fa-plus-circle me-2"></i>              Create New Task            </h4>          </div>          <div class="card-body p-4">            <!-- Fix 6: Improved form with better debugging -->            <form method="POST" id="addTaskForm" action="Index.php">              <div class="mb-3">                <label for="task_name" class="form-label">Task Title</label>                <input type="text" class="form-control" id="task_name" name="task_name" required placeholder="What needs to be done?" maxlength="255">              </div>                            <div class="row mb-3">                <div class="col-6">                  <label for="priority" class="form-label">Priority</label>                  <select class="form-select" id="priority" name="priority">                    <option value="high">🔥 High</option>                    <option value="medium" selected>⚡ Medium</option>                    <option value="low">💚 Low</option>                  </select>                </div>                <div class="col-6">                  <label for="category" class="form-label">Category</label>                  <select class="form-select" id="category" name="category">                    <option value="work">💼 Work</option>                    <option value="personal">👤 Personal</option>                    <option value="study">📚 Study</option>                    <option value="health">🏥 Health</option>                    <option value="finance">💰 Finance</option>                    <option value="other" selected>📂 Other</option>                  </select>                </div>              </div>              <div class="mb-3">                <label for="due_date" class="form-label">Due Date</label>                <input type="text" class="form-control" id="due_date" name="due_date" placeholder="Select date and time">              </div>              <div class="mb-4">                <label for="description" class="form-label">Description</label>                <textarea class="form-control" id="description" name="description" rows="3" placeholder="Add details about your task..." maxlength="1000"></textarea>              </div>              <button type="submit" name="add_task" class="btn btn-premium w-100">                <i class="fas fa-magic me-2"></i>Create Task              </button>            </form>          </div>        </div>        <!-- Quick Analytics -->        <div class="glass-card mt-4" data-aos="fade-right" data-aos-delay="200">          <div class="card-body p-4">            <h5 class="mb-3"><i class="fas fa-chart-pie me-2"></i>Quick Analytics</h5>            <canvas id="taskChart" width="300" height="200"></canvas>          </div>        </div>      </div>      <div class="col-lg-8">        <!-- Search & Filters -->        <div data-aos="fade-left">          <div class="search-container">            <input type="text" class="search-input" id="taskSearch" placeholder="Search your tasks...">            <i class="fas fa-search search-icon"></i>          </div>          <div class="filter-tabs">            <button class="filter-tab active" data-filter="all">All Tasks</button>            <button class="filter-tab" data-filter="pending">Pending</button>            <button class="filter-tab" data-filter="completed">Completed</button>            <button class="filter-tab" data-filter="overdue">Overdue</button>          </div>        </div>        <!-- Tasks List -->        <div class="task-list" id="taskList" data-aos="fade-left" data-aos-delay="100">          <?php if (empty($tasks)): ?>            <div class="glass-card text-center py-5">              <i class="fas fa-rocket text-muted" style="font-size: 3rem; opacity: 0.3;"></i>              <h4 class="text-muted mt-3">No tasks yet!</h4>              <p class="text-muted">Create your first task to get started on your productivity journey.</p>            </div>          <?php else: ?>            <?php foreach ($tasks as $index => $task): ?>              <div class="task-card <?= $task['is_completed'] ? 'completed' : ($task['status'] === 'overdue' ? 'overdue' : '') ?> priority-<?= $task['priority'] ?> slide-in-bottom"                    style="animation-delay: <?= $index * 0.1 ?>s"                   data-status="<?= $task['is_completed'] ? 'completed' : ($task['status'] === 'overdue' ? 'overdue' : 'pending') ?>">                <div class="card-body p-4">                  <div class="d-flex justify-content-between align-items-start">                    <div class="flex-grow-1">                      <div class="d-flex align-items-center mb-2">                        <h5 class="card-title mb-0 me-3 <?= $task['is_completed'] ? 'text-decoration-line-through text-muted' : '' ?>">                          <?= htmlspecialchars($task['task_name']) ?>                        </h5>                                                <span class="badge-premium me-2">                          <?= ucfirst($task['priority']) ?>                        </span>                                                <?php                          $categoryIcons = [                            'work' => '💼', 'personal' => '👤', 'study' => '📚',                             'health' => '🏥', 'finance' => '💰', 'other' => '📂'                          ];                        ?>                        <span class="badge bg-secondary">                          <?= $categoryIcons[$task['category']] ?? '📂' ?> <?= ucfirst($task['category'] ?? 'Other') ?>                        </span>                      </div>                      <?php if (!empty($task['description'])): ?>                        <p class="card-text text-muted mb-3"><?= htmlspecialchars($task['description']) ?></p>                      <?php endif; ?>                      <div class="task-meta d-flex flex-wrap gap-3 text-muted small">                        <?php if ($task['due_date']): ?>                          <span><i class="far fa-clock me-1"></i> <?= date('M j, Y g:i A', strtotime($task['due_date'])) ?></span>                        <?php endif; ?>                                                <?php if ($task['is_completed']): ?>                          <span class="text-success"><i class="fas fa-check-circle me-1"></i> Completed</span>                        <?php elseif ($task['status'] === 'overdue'): ?>                          <span class="text-danger"><i class="fas fa-exclamation-triangle me-1"></i> Overdue</span>                        <?php endif; ?>                      </div>                    </div>                    <div class="btn-group-vertical">                      <?php if (!$task['is_completed']): ?>                        <a href="Index.php?complete=<?= $task['id'] ?>"                            class="btn btn-success btn-sm mb-2 completeBtn"                           data-bs-toggle="tooltip" title="Mark as Complete">                          <i class="fas fa-check"></i>                        </a>                      <?php endif; ?>                                            <button class="btn btn-warning btn-sm mb-2 editBtn"                               data-id="<?= $task['id'] ?>"                              data-name="<?= htmlspecialchars($task['task_name']) ?>"                              data-desc="<?= htmlspecialchars($task['description']) ?>"                              data-priority="<?= $task['priority'] ?>"                              data-category="<?= $task['category'] ?>"                              data-due="<?= $task['due_date'] ?>"                              data-bs-toggle="tooltip" title="Edit Task">                        <i class="fas fa-edit"></i>                      </button>                                            <a href="Index.php?delete=<?= $task['id'] ?>"                          class="btn btn-danger btn-sm deleteBtn"                         data-bs-toggle="tooltip" title="Delete Task">                        <i class="fas fa-trash"></i>                      </a>                    </div>                  </div>                </div>              </div>            <?php endforeach; ?>          <?php endif; ?>        </div>      </div>    </div>  </div>  <!-- Floating Action Button -->  <button class="fab" id="scrollTopBtn" data-bs-toggle="tooltip" title="Back to Top">    <i class="fas fa-arrow-up"></i>  </button>  <!-- Edit Task Modal -->  <div class="modal fade" id="editTaskModal" tabindex="-1">    <div class="modal-dialog modal-lg">      <div class="modal-content">        <form method="POST" action="Index.php">          <div class="modal-header border-0 pb-0">            <h5 class="modal-title">              <i class="fas fa-edit me-2"></i>Edit Task            </h5>            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>          </div>          <div class="modal-body p-4">            <input type="hidden" name="task_id" id="editTaskId">                        <div class="mb-3">              <label class="form-label">Task Title</label>              <input type="text" class="form-control" id="editTaskName" name="task_name" required maxlength="255">            </div>                        <div class="mb-3">              <label class="form-label">Description</label>              <textarea class="form-control" id="editDescription" name="description" rows="3" maxlength="1000"></textarea>            </div>                        <div class="row mb-3">              <div class="col-md-4">                <label class="form-label">Priority</label>                <select class="form-select" id="editPriority" name="priority">                  <option value="high">🔥 High</option>                  <option value="medium">⚡ Medium</option>                  <option value="low">💚 Low</option>                </select>              </div>              <div class="col-md-4">                <label class="form-label">Category</label>                <select class="form-select" id="editCategory" name="category">                  <option value="work">💼 Work</option>                  <option value="personal">👤 Personal</option>                  <option value="study">📚 Study</option>                  <option value="health">🏥 Health</option>                  <option value="finance">💰 Finance</option>                  <option value="other">📂 Other</option>                </select>              </div>              <div class="col-md-4">                <label class="form-label">Due Date</label>                <input type="text" class="form-control" id="editDueDate" name="due_date">              </div>            </div>          </div>          <div class="modal-footer border-0 pt-0">            <button type="submit" name="update_task" class="btn btn-premium">              <i class="fas fa-save me-2"></i>Save Changes            </button>          </div>        </form>      </div>    </div>  </div>  <!-- Welcome Modal for First Visit -->  <div class="modal fade" id="welcomeModal" tabindex="-1">    <div class="modal-dialog modal-lg">      <div class="modal-content">        <div class="modal-header border-0 text-center">          <div class="w-100">            <h3 class="premium-title mb-0">              <i class="fas fa-rocket me-2"></i>              Welcome to QuickList Pro!            </h3>          </div>          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>        </div>        <div class="modal-body p-4 text-center">          <div class="row">            <div class="col-md-4 mb-4">              <i class="fas fa-magic text-primary" style="font-size: 3rem;"></i>              <h5 class="mt-3">Premium Experience</h5>              <p class="text-muted">Beautiful glassmorphism design with smooth animations</p>            </div>            <div class="col-md-4 mb-4">              <i class="fas fa-chart-line text-success" style="font-size: 3rem;"></i>              <h5 class="mt-3">Smart Analytics</h5>              <p class="text-muted">Track your productivity with visual charts and statistics</p>            </div>            <div class="col-md-4 mb-4">              <i class="fas fa-mobile-alt text-info" style="font-size: 3rem;"></i>              <h5 class="mt-3">Fully Responsive</h5>              <p class="text-muted">Perfect experience across all your devices</p>            </div>          </div>          <div class="mt-4">            <button type="button" class="btn btn-premium btn-lg" data-bs-dismiss="modal">              <i class="fas fa-rocket me-2"></i>Get Started            </button>          </div>        </div>      </div>    </div>  </div>  <!-- Debug Modal -->  <div class="modal fade" id="debugModal" tabindex="-1">    <div class="modal-dialog">      <div class="modal-content">        <div class="modal-header">          <h5 class="modal-title">Debug Information</h5>          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>        </div>        <div class="modal-body" id="debugContent">          <!-- Debug info will be inserted here -->        </div>      </div>    </div>  </div>  <!-- Scripts -->  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.all.min.js"></script>  <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>    <script>    // Initialize AOS    AOS.init({      duration: 800,      easing: 'ease-in-out-cubic'    });    // Initialize tooltips    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));    const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {      return new bootstrap.Tooltip(tooltipTriggerEl);    });    // Create animated background particles    function createParticles() {      const particles = document.querySelector('.particles');      const particleCount = 50;            for (let i = 0; i < particleCount; i++) {        const particle = document.createElement('div');        particle.className = 'particle';        particle.style.left = Math.random() * 100 + '%';        particle.style.top = Math.random() * 100 + '%';        particle.style.width = Math.random() * 4 + 2 + 'px';        particle.style.height = particle.style.width;        particle.style.animationDelay = Math.random() * 6 + 's';        particle.style.animationDuration = (Math.random() * 4 + 4) + 's';        particles.appendChild(particle);      }    }    createParticles();    // Dark mode toggle    const darkToggle = document.getElementById('darkToggle');    const body = document.body;    const isDark = localStorage.getItem('darkMode') === 'true';        if (isDark) {      body.classList.add('dark-mode');      darkToggle.innerHTML = '<i class="fas fa-sun"></i>';    }    darkToggle.addEventListener('click', () => {      body.classList.toggle('dark-mode');      const isDarkNow = body.classList.contains('dark-mode');      localStorage.setItem('darkMode', isDarkNow);      darkToggle.innerHTML = isDarkNow ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';    });    // Fullscreen toggle    document.getElementById('fullscreenBtn').addEventListener('click', () => {      if (!document.fullscreenElement) {        document.documentElement.requestFullscreen();      } else {        document.exitFullscreen();      }    });    // Initialize Flatpickr    const flatpickrConfig = {      enableTime: true,      dateFormat: "Y-m-d H:i",      minDate: "today",      theme: "material_blue",      time_24hr: true    };        flatpickr("#due_date", flatpickrConfig);    flatpickr("#editDueDate", flatpickrConfig);    // Search functionality    document.getElementById('taskSearch').addEventListener('input', function() {      const searchTerm = this.value.toLowerCase();      const tasks = document.querySelectorAll('.task-card');            tasks.forEach(task => {        const text = task.textContent.toLowerCase();        const isVisible = text.includes(searchTerm);        task.style.display = isVisible ? 'block' : 'none';                if (isVisible && searchTerm) {          task.classList.add('animate__animated', 'animate__pulse');          setTimeout(() => {            task.classList.remove('animate__animated', 'animate__pulse');          }, 1000);        }      });    });    // Filter functionality    document.querySelectorAll('.filter-tab').forEach(tab => {      tab.addEventListener('click', function() {        // Update active tab        document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));        this.classList.add('active');                const filter = this.dataset.filter;        const tasks = document.querySelectorAll('.task-card');                tasks.forEach(task => {          const status = task.dataset.status;          let show = false;                    switch(filter) {            case 'all':              show = true;              break;            case 'pending':              show = status === 'pending';              break;            case 'completed':              show = status === 'completed';              break;            case 'overdue':              show = status === 'overdue';              break;          }                    task.style.display = show ? 'block' : 'none';        });      });    });    // Edit modal population    document.querySelectorAll('.editBtn').forEach(btn => {      btn.addEventListener('click', () => {        document.getElementById('editTaskId').value = btn.dataset.id;        document.getElementById('editTaskName').value = btn.dataset.name;        document.getElementById('editDescription').value = btn.dataset.desc;        document.getElementById('editPriority').value = btn.dataset.priority;        document.getElementById('editCategory').value = btn.dataset.category;                if (btn.dataset.due) {          const dueDate = new Date(btn.dataset.due);          const formattedDate = dueDate.getFullYear() + '-' +                                String(dueDate.getMonth() + 1).padStart(2, '0') + '-' +                                String(dueDate.getDate()).padStart(2, '0') + ' ' +                               String(dueDate.getHours()).padStart(2, '0') + ':' +                               String(dueDate.getMinutes()).padStart(2, '0');          document.getElementById('editDueDate').value = formattedDate;        } else {          document.getElementById('editDueDate').value = '';        }                new bootstrap.Modal(document.getElementById('editTaskModal')).show();      });    });    // Enhanced delete confirmation    document.querySelectorAll('.deleteBtn').forEach(btn => {      btn.addEventListener('click', function(e) {        e.preventDefault();        const url = this.href;                Swal.fire({          title: 'Delete Task?',          text: "This action cannot be undone!",          icon: 'warning',          showCancelButton: true,          confirmButtonColor: '#f093fb',          cancelButtonColor: '#6b7280',          confirmButtonText: 'Yes, delete it!',          cancelButtonText: 'Cancel',          background: 'rgba(255, 255, 255, 0.95)',          backdrop: 'rgba(0, 0, 0, 0.4)',          customClass: {            popup: 'glass-card'          }        }).then(result => {          if (result.isConfirmed) {            // Add deletion animation            this.closest('.task-card').style.transform = 'scale(0.8)';            this.closest('.task-card').style.opacity = '0';            setTimeout(() => {              window.location.href = url;            }, 300);          }        });      });    });    // Complete task animation    document.querySelectorAll('.completeBtn').forEach(btn => {      btn.addEventListener('click', function(e) {        e.preventDefault();        const taskCard = this.closest('.task-card');                // Add completion animation        taskCard.style.transform = 'scale(1.05)';        taskCard.style.filter = 'brightness(1.2)';                setTimeout(() => {          window.location.href = this.href;        }, 500);      });    });    // Scroll to top functionality    const scrollTopBtn = document.getElementById('scrollTopBtn');        window.addEventListener('scroll', () => {      if (window.pageYOffset > 300) {        scrollTopBtn.style.display = 'block';      } else {        scrollTopBtn.style.display = 'none';      }    });    scrollTopBtn.addEventListener('click', () => {      window.scrollTo({        top: 0,        behavior: 'smooth'      });    });    // Task Chart    const ctx = document.getElementById('taskChart').getContext('2d');    const taskChart = new Chart(ctx, {      type: 'doughnut',      data: {        labels: ['Completed', 'Pending', 'Overdue'],        datasets: [{          data: [            <?= $completedCount ?>,            <?= count(array_filter($tasks, fn($t) => !$t['is_completed'] && $t['status'] !== 'overdue')) ?>,            <?= count(array_filter($tasks, fn($t) => $t['status'] === 'overdue')) ?>          ],          backgroundColor: [            'rgba(72, 219, 251, 0.8)',            'rgba(102, 126, 234, 0.8)',            'rgba(240, 147, 251, 0.8)'          ],          borderWidth: 0,          hoverBorderWidth: 3,          hoverBorderColor: '#fff'        }]      },      options: {        responsive: true,        maintainAspectRatio: false,        plugins: {          legend: {            position: 'bottom',            labels: {              padding: 20,              usePointStyle: true,              pointStyle: 'circle'            }          }        },        animation: {          animateRotate: true,          animateScale: true,          duration: 2000        }      }    });    // Form submission with debugging    document.getElementById('addTaskForm').addEventListener('submit', function(e) {      console.log('Form submission started');            const submitBtn = this.querySelector('button[type="submit"]');      const taskName = document.getElementById('task_name').value;            // Debug logging      console.log('Task name:', taskName);      console.log('Form data:', new FormData(this));            if (!taskName.trim()) {        e.preventDefault();        alert('Please enter a task name');        return false;      }            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating...';      submitBtn.disabled = true;            // Add a small delay to see the loading state      setTimeout(() => {        console.log('Form being submitted');      }, 100);    });    // Debug function (can be called from browser console)    window.debugTaskForm = function() {      const form = document.getElementById('addTaskForm');      const formData = new FormData(form);      const debugInfo = {        method: form.method,        action: form.action,        data: {}      };            for (let [key, value] of formData.entries()) {        debugInfo.data[key] = value;      }            console.log('Form Debug Info:', debugInfo);            // Show in modal      document.getElementById('debugContent').innerHTML =         '<pre>' + JSON.stringify(debugInfo, null, 2) + '</pre>';      new bootstrap.Modal(document.getElementById('debugModal')).show();    };    // Auto-hide alerts    setTimeout(() => {      const alerts = document.querySelectorAll('.alert');      alerts.forEach(alert => {        alert.classList.add('animate__animated', 'animate__fadeOut');        setTimeout(() => alert.remove(), 500);      });    }, 5000);    // Welcome modal for new users    if (!localStorage.getItem('visited')) {      setTimeout(() => {        new bootstrap.Modal(document.getElementById('welcomeModal')).show();        localStorage.setItem('visited', 'true');      }, 1000);    }    // Keyboard shortcuts    document.addEventListener('keydown', function(e) {      // Ctrl/Cmd + N for new task      if ((e.ctrlKey || e.metaKey) && e.key === 'n') {        e.preventDefault();        document.getElementById('task_name').focus();      }            // Ctrl/Cmd + / for search      if ((e.ctrlKey || e.metaKey) && e.key === '/') {        e.preventDefault();        document.getElementById('taskSearch').focus();      }            // Ctrl/Cmd + D for debug (development only)      if ((e.ctrlKey || e.metaKey) && e.key === 'd') {        e.preventDefault();        window.debugTaskForm();      }            // Escape to close modals      if (e.key === 'Escape') {        const openModal = document.querySelector('.modal.show');        if (openModal) {          bootstrap.Modal.getInstance(openModal).hide();        }      }    });    // Add some extra interactivity    document.querySelectorAll('.glass-card').forEach(card => {      card.addEventListener('mouseenter', function() {        this.style.transform = 'translateY(-2px)';      });            card.addEventListener('mouseleave', function() {        this.style.transform = 'translateY(0)';      });    });    // Performance optimization - lazy load animations    const observerOptions = {      threshold: 0.1,      rootMargin: '0px 0px -50px 0px'    };    const observer = new IntersectionObserver((entries) => {      entries.forEach(entry => {        if (entry.isIntersecting) {          entry.target.classList.add('animate__animated', 'animate__fadeInUp');        }      });    }, observerOptions);    document.querySelectorAll('.task-card').forEach(card => {      observer.observe(card);    });        // Additional debugging for form issues    console.log('Task management system loaded successfully');    console.log('Available debug functions: window.debugTaskForm()');  </script></body></html>